// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArgContainer.proto

#include <CvGameCoreDLLPCH.h>
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArgContainer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_ArgContainer_2eproto() {
  delete ArgContainer::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ArgContainer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ArgContainer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ArgContainer::default_instance_ = new ArgContainer();
  ArgContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArgContainer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ArgContainer_2eproto_once_);
void protobuf_AddDesc_ArgContainer_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ArgContainer_2eproto_once_,
                 &protobuf_AddDesc_ArgContainer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArgContainer_2eproto {
  StaticDescriptorInitializer_ArgContainer_2eproto() {
    protobuf_AddDesc_ArgContainer_2eproto();
  }
} static_descriptor_initializer_ArgContainer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ArgContainer::kArgs1FieldNumber;
const int ArgContainer::kArgs2FieldNumber;
const int ArgContainer::kArgs3FieldNumber;
const int ArgContainer::kArgs4FieldNumber;
const int ArgContainer::kArgs5FieldNumber;
const int ArgContainer::kArgs6FieldNumber;
const int ArgContainer::kArgs7FieldNumber;
#endif  // !_MSC_VER

ArgContainer::ArgContainer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArgContainer::InitAsDefaultInstance() {
}

ArgContainer::ArgContainer(const ArgContainer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArgContainer::SharedCtor() {
  _cached_size_ = 0;
  args1_ = 0;
  args2_ = 0;
  args3_ = 0;
  args4_ = 0;
  args5_ = 0;
  args6_ = 0;
  args7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArgContainer::~ArgContainer() {
  SharedDtor();
}

void ArgContainer::SharedDtor() {
  if (args7_ != &::google::protobuf::internal::kEmptyString) {
    delete args7_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArgContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArgContainer& ArgContainer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArgContainer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArgContainer_2eproto();
#endif
  return *default_instance_;
}

ArgContainer* ArgContainer::default_instance_ = NULL;

ArgContainer* ArgContainer::New() const {
  return new ArgContainer;
}

void ArgContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    args1_ = 0;
    args2_ = 0;
    args3_ = 0;
    args4_ = 0;
    args5_ = 0;
    args6_ = 0;
    if (has_args7()) {
      if (args7_ != &::google::protobuf::internal::kEmptyString) {
        args7_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArgContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 args1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args1_)));
          set_has_args1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_args2;
        break;
      }

      // optional int32 args2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args2_)));
          set_has_args2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_args3;
        break;
      }

      // optional int32 args3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args3_)));
          set_has_args3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_args4;
        break;
      }

      // optional int32 args4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args4_)));
          set_has_args4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_args5;
        break;
      }

      // optional int32 args5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args5_)));
          set_has_args5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_args6;
        break;
      }

      // optional int32 args6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args6_)));
          set_has_args6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args7;
        break;
      }

      // optional string args7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args7()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArgContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 args1 = 1;
  if (has_args1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->args1(), output);
  }

  // optional int32 args2 = 2;
  if (has_args2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->args2(), output);
  }

  // optional int32 args3 = 3;
  if (has_args3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->args3(), output);
  }

  // optional int32 args4 = 4;
  if (has_args4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->args4(), output);
  }

  // optional int32 args5 = 5;
  if (has_args5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->args5(), output);
  }

  // optional int32 args6 = 6;
  if (has_args6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->args6(), output);
  }

  // optional string args7 = 7;
  if (has_args7()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->args7(), output);
  }

}

int ArgContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 args1 = 1;
    if (has_args1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args1());
    }

    // optional int32 args2 = 2;
    if (has_args2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args2());
    }

    // optional int32 args3 = 3;
    if (has_args3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args3());
    }

    // optional int32 args4 = 4;
    if (has_args4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args4());
    }

    // optional int32 args5 = 5;
    if (has_args5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args5());
    }

    // optional int32 args6 = 6;
    if (has_args6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args6());
    }

    // optional string args7 = 7;
    if (has_args7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args7());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgContainer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArgContainer*>(&from));
}

void ArgContainer::MergeFrom(const ArgContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_args1()) {
      set_args1(from.args1());
    }
    if (from.has_args2()) {
      set_args2(from.args2());
    }
    if (from.has_args3()) {
      set_args3(from.args3());
    }
    if (from.has_args4()) {
      set_args4(from.args4());
    }
    if (from.has_args5()) {
      set_args5(from.args5());
    }
    if (from.has_args6()) {
      set_args6(from.args6());
    }
    if (from.has_args7()) {
      set_args7(from.args7());
    }
  }
}

void ArgContainer::CopyFrom(const ArgContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgContainer::IsInitialized() const {

  return true;
}

void ArgContainer::Swap(ArgContainer* other) {
  if (other != this) {
    std::swap(args1_, other->args1_);
    std::swap(args2_, other->args2_);
    std::swap(args3_, other->args3_);
    std::swap(args4_, other->args4_);
    std::swap(args5_, other->args5_);
    std::swap(args6_, other->args6_);
    std::swap(args7_, other->args7_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArgContainer::GetTypeName() const {
  return "ArgContainer";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
