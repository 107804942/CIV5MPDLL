#include <CvGameCoreDLLPCH.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArgContainer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArgContainer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_ArgContainer_2eproto() {
    delete ArgContainer::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ArgContainer_2eproto_impl() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ArgContainer_2eproto() {
    static bool already_here = false;
    if (already_here) return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ArgContainer::default_instance_ = new ArgContainer();
    ArgContainer::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArgContainer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ArgContainer_2eproto_once_);
void protobuf_AddDesc_ArgContainer_2eproto() {
    ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ArgContainer_2eproto_once_,
        &protobuf_AddDesc_ArgContainer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArgContainer_2eproto {
    StaticDescriptorInitializer_ArgContainer_2eproto() {
        protobuf_AddDesc_ArgContainer_2eproto();
    }
} static_descriptor_initializer_ArgContainer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ArgContainer::kFunctionToCallFieldNumber;
const int ArgContainer::kArgsFieldNumber;
#endif  // !_MSC_VER

ArgContainer::ArgContainer()
    : ::google::protobuf::MessageLite() {
    SharedCtor();
}

void ArgContainer::InitAsDefaultInstance() {
}

ArgContainer::ArgContainer(const ArgContainer & from)
    : ::google::protobuf::MessageLite() {
    SharedCtor();
    MergeFrom(from);
}

void ArgContainer::SharedCtor() {
    _cached_size_ = 0;
    functiontocall_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArgContainer::~ArgContainer() {
    SharedDtor();
}

void ArgContainer::SharedDtor() {
    if (functiontocall_ != &::google::protobuf::internal::kEmptyString) {
        delete functiontocall_;
    }
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
    }

void ArgContainer::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArgContainer& ArgContainer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_ArgContainer_2eproto();
#else
    if (default_instance_ == NULL) protobuf_AddDesc_ArgContainer_2eproto();
#endif
    return *default_instance_;
}

ArgContainer* ArgContainer::default_instance_ = NULL;

ArgContainer* ArgContainer::New() const {
    return new ArgContainer;
}

void ArgContainer::Clear() {
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (has_functiontocall()) {
            if (functiontocall_ != &::google::protobuf::internal::kEmptyString) {
                functiontocall_->clear();
            }
        }
    }
    args_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArgContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream * input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0) {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required string functionToCall = 1;
        case 1: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_functiontocall()));
            }
            else {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(16)) goto parse_args;
            break;
        }

              // repeated int32 args = 2;
        case 2: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
            parse_args:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        1, 16, input, this->mutable_args())));
            }
            else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                == ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, this->mutable_args())));
            }
            else {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(16)) goto parse_args;
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default: {
        handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void ArgContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream * output) const {
    // required string functionToCall = 1;
    if (has_functiontocall()) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->functiontocall(), output);
    }

    // repeated int32 args = 2;
    for (int i = 0; i < this->args_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
            2, this->args(i), output);
    }

}

int ArgContainer::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // required string functionToCall = 1;
        if (has_functiontocall()) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->functiontocall());
        }

    }
    // repeated int32 args = 2;
    {
        int data_size = 0;
        for (int i = 0; i < this->args_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int32Size(this->args(i));
        }
        total_size += 1 * this->args_size() + data_size;
    }

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ArgContainer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite & from) {
    MergeFrom(*::google::protobuf::down_cast<const ArgContainer*>(&from));
}

void ArgContainer::MergeFrom(const ArgContainer & from) {
    GOOGLE_CHECK_NE(&from, this);
    args_.MergeFrom(from.args_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_functiontocall()) {
            set_functiontocall(from.functiontocall());
        }
    }
}

void ArgContainer::CopyFrom(const ArgContainer & from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ArgContainer::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
}

void ArgContainer::Swap(ArgContainer * other) {
    if (other != this) {
        std::swap(functiontocall_, other->functiontocall_);
        args_.Swap(&other->args_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::std::string ArgContainer::GetTypeName() const {
    return "ArgContainer";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
